/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input [4:0] io_button,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  reg [1:0] z;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam STATEZERO_state = 4'd0;
  localparam STATEONE_state = 4'd1;
  localparam STATETWO_state = 4'd2;
  localparam STATETHREE_state = 4'd3;
  localparam STATEFOUR_state = 4'd4;
  localparam STATEFIVE_state = 4'd5;
  localparam STATESIX_state = 4'd6;
  localparam STATESEVEN_state = 4'd7;
  localparam STATEEIGHT_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = STATEZERO_state;
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [1-1:0] M_myfulladder_outc;
  wire [1-1:0] M_myfulladder_outs;
  reg [1-1:0] M_myfulladder_clk;
  reg [1-1:0] M_myfulladder_rst;
  reg [3-1:0] M_myfulladder_in;
  fulladder_3 myfulladder (
    .clk(M_myfulladder_clk),
    .rst(M_myfulladder_rst),
    .in(M_myfulladder_in),
    .outc(M_myfulladder_outc),
    .outs(M_myfulladder_outs)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_myfulladder_clk = clk;
    M_myfulladder_rst = rst;
    M_myfulladder_in = 3'h0;
    M_seg_values = 16'haaaa;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    
    case (M_state_q)
      STATEZERO_state: begin
        io_led = 24'h000000;
        M_counter_d = 1'h0;
        M_seg_values = 16'haaaa;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = STATEONE_state;
        end
      end
      STATEONE_state: begin
        M_myfulladder_in = 3'h0;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha000;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h0) begin
          M_counter_d = 1'h0;
          M_state_d = STATETWO_state;
        end else begin
          if (z != 2'h0) begin
            io_led[16+0+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATETWO_state;
            end
          end
        end
      end
      STATETWO_state: begin
        M_myfulladder_in = 3'h1;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha001;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h1) begin
          M_counter_d = 1'h0;
          M_state_d = STATETHREE_state;
        end else begin
          if (z != 2'h1) begin
            io_led[16+1+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATETHREE_state;
            end
          end
        end
      end
      STATETHREE_state: begin
        M_myfulladder_in = 3'h2;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha010;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h1) begin
          M_counter_d = 1'h0;
          M_state_d = STATEFOUR_state;
        end else begin
          if (z != 2'h1) begin
            io_led[16+2+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEFOUR_state;
            end
          end
        end
      end
      STATEFOUR_state: begin
        M_myfulladder_in = 3'h3;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha011;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h2) begin
          M_counter_d = 1'h0;
          M_state_d = STATEFIVE_state;
        end else begin
          if (z != 2'h2) begin
            io_led[16+3+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEFIVE_state;
            end
          end
        end
      end
      STATEFIVE_state: begin
        M_myfulladder_in = 3'h0;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha100;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h1) begin
          M_counter_d = 1'h0;
          M_state_d = STATESIX_state;
        end else begin
          if (z != 2'h1) begin
            io_led[16+4+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATESIX_state;
            end
          end
        end
      end
      STATESIX_state: begin
        M_myfulladder_in = 3'h1;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha101;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h2) begin
          M_counter_d = 1'h0;
          M_state_d = STATESEVEN_state;
        end else begin
          if (z != 2'h2) begin
            io_led[16+5+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATESEVEN_state;
            end
          end
        end
      end
      STATESEVEN_state: begin
        M_myfulladder_in = 3'h2;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha110;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h2) begin
          M_counter_d = 1'h0;
          M_state_d = STATEEIGHT_state;
        end else begin
          if (z != 2'h2) begin
            io_led[16+6+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEEIGHT_state;
            end
          end
        end
      end
      STATEEIGHT_state: begin
        M_myfulladder_in = 3'h3;
        io_led[0+0+0-:1] = M_myfulladder_outs;
        io_led[8+0+0-:1] = M_myfulladder_outc;
        z[0+0-:1] = M_myfulladder_outs;
        z[1+0-:1] = M_myfulladder_outc;
        M_seg_values = 16'ha111;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && z == 2'h3) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end else begin
          if (z != 2'h3) begin
            io_led[16+7+0-:1] = 1'h1;
            if (M_counter_q[27+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEZERO_state;
            end
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
